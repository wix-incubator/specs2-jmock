package com.wixpress.common.specs2.impostisers

import java.lang.invoke.{MethodHandles, MethodType}
import java.lang.reflect.{Constructor, Method}


/**
 * Invokes methods as defined in their [[getDeclaringClass]], bypassing any overrides.
 * This is useful for invoking the actual implementations of non-abstract methods of dynamyc proxies (generated by Java reflection or ByteBuddy).
 * Uses method handles and `invokespecial`.
 * Based on https://stackoverflow.com/a/58800339/10035812
 */
object SpecialMethodInvoker extends SpecialMethodInvoker {
  private val java8ClassVersion = 52
  private val javaClassVersion = System.getProperty("java.class.version").toFloat
  private val instance = if(javaClassVersion <= java8ClassVersion) java8Invoker else java9AndLaterInvoker

  override def invoke(impl: AnyRef,
                      method: Method,
                      args: Array[AnyRef]): AnyRef = instance.invoke(impl, method, args)

  private lazy val java8Invoker = new SpecialMethodInvoker {
    private val constructor: Constructor[MethodHandles.Lookup] =
      classOf[MethodHandles.Lookup].getDeclaredConstructor(classOf[Class[_]])
    constructor.setAccessible(true)

    override def invoke(impl: AnyRef, method: Method, args: Array[AnyRef]): AnyRef = {
      val clazz = method.getDeclaringClass
      constructor.newInstance(clazz)
        .in(clazz)
        .unreflectSpecial(method, clazz)
        .bindTo(impl)
        .invokeWithArguments(args:_*)
    }
  }

  private lazy val java9AndLaterInvoker = new SpecialMethodInvoker {
    override def invoke(proxy: AnyRef,
                        method: Method,
                        args: Array[AnyRef]): AnyRef = {

      MethodHandles.lookup
        .findSpecial(
          method.getDeclaringClass,
          method.getName,
          MethodType.methodType(method.getReturnType, method.getParameterTypes),
          method.getDeclaringClass)
        .bindTo(proxy)
        .invokeWithArguments(args:_*)
    }
  }
}

sealed trait SpecialMethodInvoker {
  def invoke(impl: AnyRef, method: Method, args: Array[AnyRef]): AnyRef
}

